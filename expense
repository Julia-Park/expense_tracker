#! /usr/bin/env ruby

require 'pg'
require 'yaml'

class ExpenseData
  def initialize(db='expense_tracker')
    @connection = PG.connect(dbname: db)
  end

  def list(query=nil, params=nil)
    result = @connection.exec('SELECT * FROM expenses;')
    display_expenses(result)
  end
  
  def add(amount, memo, date=nil)
    error = if amount.nil? || memo.nil?
      'You must provide an amount and memo.'
    elsif !amount.match?(/^\d{0,4}(\.\d{0,2})?$/)
      'Enter a valid amount.'
    elsif !date.nil? && !valid_date?(date)
      'Entered date is invalid.'
    end
  
    abort error if error

    if date
      sql = [', created_on', ', $3']
      params = [amount, memo, Date.parse(date)]
    else
      sql = []
      params = [amount, memo]
    end

    @connection.exec_params(
      "INSERT INTO expenses (amount, memo #{sql[0]}) VALUES ($1, $2 #{sql[1]});",
      params
    )
  end

  def search(term)
    abort 'Enter a term to search.' if term.nil?

    result = @connection.exec_params(
      'SELECT * FROM expenses WHERE memo ILIKE $1;',
      ["%#{term}%"]
    )

    display_expenses(result)
  end

  def delete(id)
    abort 'Enter a valid number.' if !id.match?(/\d+/)

    to_delete = @connection.exec_params(
      'SELECT * FROM expenses WHERE id = $1',
      [id]
    )

    if to_delete.ntuples > 0
      @connection.exec_params('DELETE FROM expenses WHERE id = $1', [id])
      puts 'The following expense has been deleted:'
      display_expenses(to_delete)
    else
      puts "There is no expense with the id '#{id}'."
    end
  end

  private

  def display_expenses(result)
    result.each do |tuple|
      id = tuple['id'].rjust(3)
      amount = tuple['amount'].rjust(12)
      date = tuple['created_on'].rjust(10)
      memo = tuple['memo']
  
      puts "#{id} | #{date} | #{amount} | #{memo}"
    end
  end

  def valid_date?(string)
    begin
      Date.parse(string)
      true
    rescue Date::Error
      false
    end
  end
end

class CLI
  def initialize
    @application = ExpenseData.new
  end

  def run(args)
    case args.first
    when 'list'   then @application.list
    when 'add'    then @application.add(args[1], args[2], args[3])
    when 'search' then @application.search(args[1])
    when 'delete' then @application.delete(args[1])
    else          display_help
    end
  end

  private

  def display_help
    commands = YAML.load(File.read('./commands.yml'))
    puts "An expense recording system\n\nCommands:\n\n"
  
    length = commands.keys.max { |a, b| a.length <=> b.length }.length
  
    commands.each do |command, desc|
      puts "#{command.ljust(length)} : #{desc}"
    end
  end
end

CLI.new.run(ARGV)
